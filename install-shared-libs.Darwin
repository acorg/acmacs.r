#! /usr/bin/env python3

import sys, os, subprocess, shutil

# ----------------------------------------------------------------------

def main(target_package_dir, *libraries):
    print(" ".join(sys.argv))
    to_process = set(libraries)
    rpath_source_dirs = set(os.path.dirname(lib) for lib in libraries if lib)
    target_dir = os.path.join(target_package_dir, "libs")

    # binaries
    for bin_name in ["chart-info", "chart-relax"]:
        chart_info_bin = os.path.join(os.environ["ACMACSD_ROOT"], "bin", bin_name)
        print(chart_info_bin, target_dir)
        if os.path.exists(chart_info_bin):
            shutil.copy(chart_info_bin, target_dir)
            to_process.add(os.path.join(target_dir, bin_name))

    processed = set()
    libomp = find_libomp()
    while to_process:
        library = to_process.pop()
        processed.add(library)
        for name in linked_to(library):
            if libomp and "libomp.dylib" in name and name != libomp:
                # use libomp that comes with R instead one from llvm to avoid double initialization conflict
                install_name_tool(name, libomp, library)
            elif os.path.basename(library) != os.path.basename(name) and not in_system(name):
                install_name_tool(name, "@loader_path/" + os.path.basename(name), library)
                target_lib = os.path.join(target_dir, os.path.basename(name))
                if target_lib not in processed and target_lib not in to_process:
                    print("copy", name, target_lib)
                    if name.startswith("@rpath"):
                        name = name.replace("@rpath/", "")
                        for src_dir in rpath_source_dirs:
                            src_name = os.path.join(src_dir, name)
                            # print(f">>>> @rpath {src_name}")
                            if os.path.exists(src_name):
                                name = src_name
                                break
                        # print(f">>>> @rpath {name} lib:{library}")
                    shutil.copy(name, target_lib)
                    rpath_source_dirs.add(os.path.dirname(name))
                    to_process.add(target_lib)
    # if not libomp:
    #     print("WARNING: no libomp found in", libraries, file=sys.stderr)

# ----------------------------------------------------------------------

system_lib_paths = ["/usr/lib/", "/System/", "/Library/"]

def in_system(name):
    for path in system_lib_paths:
        if name.startswith(path):
            return True
    return False

def otool(library):
    cmd = ["/usr/bin/otool", "-L", library]
    print(" ".join(cmd))
    result = subprocess.check_output(cmd).decode("utf-8").strip().split("\n")[1:]
    print("   ", "\n    ".join(result))
    return result

def linked_to(library):
    return [lib.split("(")[0].strip() for lib in otool(library)]

def install_name_tool(name, new_name, library):
    subprocess.check_call(["/bin/chmod", "+w", library])
    cmd = ["/usr/bin/install_name_tool", "-change", name, new_name, library]
    print(" ".join(cmd))
    subprocess.check_call(cmd)

def find_libomp():
    for lib in linked_to("acmacs.r.so"):
        if "libomp.dylib" in lib:
            return lib
    return None

# ----------------------------------------------------------------------

try:
    if sys.platform != 'darwin':
        raise RuntimeError("this script cannot be run on " + sys.platform)
    if len(sys.argv) < 3:
        raise RuntimeError("Usage: %s <target_package_dir> <library> ..." % sys.argv[0])
    main(*sys.argv[1:])
    # print(sys.argv[0], "done")
    exit(0)
except Exception as err:
    print("ERROR:", err, file=sys.stderr)
    exit(1)

# ----------------------------------------------------------------------
